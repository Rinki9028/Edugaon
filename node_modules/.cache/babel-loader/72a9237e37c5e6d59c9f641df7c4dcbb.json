{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:\\\\MAPI\\\\Edugaon\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\nexport function useTransitionTrigger(requestEnter) {\n  var _React$useReducer = React.useReducer(transitionStateReducer, {\n      elementExited: !requestEnter,\n      inProgress: false\n    }),\n    _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n    state = _React$useReducer2[0],\n    dispatch = _React$useReducer2[1];\n  var hasTransition = React.useRef(false);\n  var handleEntering = React.useCallback(function () {\n    dispatch('entering');\n  }, []);\n  var handleEntered = React.useCallback(function () {\n    dispatch('entered');\n  }, []);\n  var handleExiting = React.useCallback(function () {\n    dispatch('exiting');\n  }, []);\n  var handleExited = React.useCallback(function () {\n    dispatch('exited');\n  }, []);\n  React.useEffect(function () {\n    if (!hasTransition.current) {\n      if (requestEnter) {\n        dispatch('entered');\n      } else {\n        dispatch('exited');\n      }\n    }\n  }, [requestEnter]);\n  var registerTransition = React.useCallback(function () {\n    hasTransition.current = true;\n    return function () {\n      hasTransition.current = false;\n    };\n  }, []);\n  var contextValue = React.useMemo(function () {\n    return {\n      requestedEnter: requestEnter,\n      onEntering: handleEntering,\n      onEntered: handleEntered,\n      onExiting: handleExiting,\n      onExited: handleExited,\n      registerTransition: registerTransition,\n      hasExited: state.elementExited\n    };\n  }, [handleEntering, handleEntered, handleExiting, handleExited, requestEnter, registerTransition, state.elementExited]);\n  return {\n    contextValue: contextValue,\n    hasExited: state.elementExited,\n    transitionInProgress: state.inProgress\n  };\n}\nfunction transitionStateReducer(_, action) {\n  switch (action) {\n    case 'entering':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n    case 'entered':\n      return {\n        elementExited: false,\n        inProgress: false\n      };\n    case 'exiting':\n      return {\n        elementExited: false,\n        inProgress: true\n      };\n    case 'exited':\n      return {\n        elementExited: true,\n        inProgress: false\n      };\n    default:\n      throw new Error(\"Unhandled action: \".concat(action));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}